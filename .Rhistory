}
p <- fact_func("jamie")
x <- mean_val(p, "jamie")
print(p)
print(x)
sum_dev <- function(vector_val){
sum_val <- 0
for (i in vector_val){
sum_val <- sum_val + i
}
return (sum_val)
}
mean_vector <- function(sum_val, vector_val){
count_vec <- length(vector_val)
mean.val <- sum_val/count_vec
return (mean.val)
}
h <- sum_dev(c(3, 6, 8, 3, 5, 9, 11))
print(h)
sum_dev <- function(vector_val){
sum_val <- 0
for (i in vector_val){
sum_val <- sum_val + i
}
return (sum_val)
}
mean_vector <- function(sum_val, vector_val){
count_vec <- length(vector_val)
mean.val <- sum_val/count_vec
return (mean.val)
}
val_vector <- c(3, 6, 8, 3, 5, 9, 11)
h <- sum_dev(val_vector)
g <- mean_vector(h,val_vector)
print(g)
print(h)
ind_flat <- function(vector_val, mean.val){
p_vec <- c()
for (i in vector_val){
p <- (i - mean.val)**2
p_vec <- c(p_vec, p)
}
return (p_vec)
}
val_vector <- c(3, 6, 8, 3, 5, 9, 11)
h <- sum_dev(val_vector)
g <- mean_vector(h,val_vector)
vect_ret <- ind_flat(val_vector, g)
print(g)
print(h)
print(vec_ret)
print(vect_ret)
sum_vect <- function(p_vec){
sum_vec <- 0
for (i in p_vec){
sum_vec <- i + sum_vec
}
return (sum_vec)
}
val_vector <- c(3, 6, 8, 3, 5, 9, 11)
h <- sum_dev(val_vector)
g <- mean_vector(h,val_vector)
vect_ret <- ind_flat(val_vector, g)
sum_myvec <- sum_vect(vect_ret)
print(g)
print(h)
print(vect_ret)
print(sum_myvec)
install.packages('readr')
library('readr')
path_data <- "/c/Users/USER/Downloads/Iris.csv"
df_table <- read_csv(path_data)
print(df_table)
path_data <- "/c/Users/USER/Downloads/Iris.csv"
df_table <- read_csv(path_data)
path_data <- "c/Users/USER/Downloads/Iris.csv"
df_table <- read_csv(path_data)
library('readr')
path_data <- "/c/Users/USER/Downloads/Iris.csv"
df_table <- read_csv(path_data)
path_data <- "C:/Users/USER/Downloads/Iris.csv"
#"C:\Users\USER\Downloads\Iris.csv"
df_table <- read_csv(path_data)
print(df_table)
view(df_table)
View(df_table)
class(df_table)
head(df_table)
colnames(df_table)
class(colnames(df_table))
for (i in colnames(df_table)){
print(i)
}
ncol(df_table)
nrows(df_table)
nrow(df_table)
fact_func <- function(x){
str_count <- nchar(x)
fact <- 1
for (i in 1:str_count){
fact <- fact * i
}
return (fact)
}
mean_val <- function(fact, x){
len_x <- nchar(x)
formular <- fact/len_x
return (formular)
}
p <- fact_func("jamie")
x <- mean_val(p, "jamie")
print(p)
print(x)
sum_dev <- function(vector_val){
sum_val <- 0
for (i in vector_val){
sum_val <- sum_val + i
}
return (sum_val)
}
mean_vector <- function(sum_val, vector_val){
count_vec <- length(vector_val)
mean.val <- sum_val/count_vec
return (mean.val)
}
ind_flat <- function(vector_val, mean.val){
p_vec <- c()
for (i in vector_val){
p <- (i - mean.val)**2
p_vec <- c(p_vec, p)
}
return (p_vec)
}
sum_vect <- function(p_vec){
sum_vec <- 0
for (i in p_vec){
sum_vec <- i + sum_vec
}
return (sum_vec)
}
val_vector <- c(3, 6, 8, 3, 5, 9, 11)
h <- sum_dev(val_vector)
g <- mean_vector(h,val_vector)
vect_ret <- ind_flat(val_vector, g)
sum_myvec <- sum_vect(vect_ret)
print(g)
print(h)
library("readr")
path <- "C:/Users/USER/Downloads/DataDIAB/diabetes.csv"
df <- read_csv(path)
View(df)
cols <- colnames(df)
print(cols)
print(nrow(df))
print(ncol(df))
over_80 <- df$Age >= 80
c <- df[over_80]
View(c)
over_80 <- df$Age >= 80
dat_age <- df[over_80]
print(dat_age)
over_80 <- df$Age >= 25
dat_age <- df[over_80]
cols <- colnames(df)
print(cols)
a_val <- df$Age > 30
print(a_val)
b_val <- df[a_val,]
print(b_val)
a_val <- df$Age > 30
b_val <- df[a_val,]
View(b_val)
a_val <- df$Age >=50
b_val <- df[a_val,]
View(b_val)
a_val <- df$Age >=50
b_val <- df[a_val,]
sum(b_val)
sum(a_val)
d_val <- which(a_val)
print(d_val)
print(df[d_val,])
age_dependency <- function(age_val){
a_val <- df$Age >=age_val
b_val <- df[a_val,]
print(b_val)
}
age_dependency(50)
age_dependency(25)
cols <- colnames(df)
print(cols)
age_outcome <- df$Age > 50  & df$Outcome == 1
a_out <- df[age_outcome, ]
print(a_out)
View(a_out)
age_outcome_dependency <- function(age, outcome_val){
age_outcome <- df$Age > age  & df$Outcome == outcome_val
a_out <- df[age_outcome, ]
print(a_out)
}
age_outcome_dependency(38, 0)
age_outcome_dependency(38, 1)
cols <- colnames(df)
print(cols)
a.mean_val  <- function(){
mean_out_a <- df$Outcome == 1
df_out <- df[mean_out_a, ]
ped <- mean(df_out$DiabetesPedigreeFunction)
print(ped)
}
a.mean_val()
a.mean_val  <- function(out_val){
mean_out_a <- df$Outcome == out_val
df_out <- df[mean_out_a, ]
ped <- mean(df_out$DiabetesPedigreeFunction)
print(ped)
}
a.mean_val(1)
a.mean_val(0)
zero_out <- a.mean_val(0)
one_out <- a.mean_val(1)
a.mean_val  <- function(out_val){
mean_out_a <- df$Outcome == out_val
df_out <- df[mean_out_a, ]
ped <- mean(df_out$DiabetesPedigreeFunction)
value<- paste("the mean of outcome ", out_val, "is" ped, sep = " ")
return(value)
}
a.mean_val  <- function(out_val){
mean_out_a <- df$Outcome == out_val
df_out <- df[mean_out_a, ]
ped <- mean(df_out$DiabetesPedigreeFunction)
value<- paste("the mean of outcome ", out_val, "is", ped, sep = " ")
return(value)
}
zero_out <- a.mean_val(0)
print(zero_out)
print(one_out)
one_out <- a.mean_val(1)
print(one_out)
a.mean_val  <- function(out_val){
mean_out_a <- df$Outcome == out_val
df_out <- df[mean_out_a, ]
ped <- mean(df_out$DiabetesPedigreeFunction)
value<- paste("the mean of outcome ", out_val, "pedigree function", ped, sep = " ")
return(value)
}
zero_out <- a.mean_val(0)
print(zero_out)
one_out <- a.mean_val(1)
print(one_out)
mean_out_a <- df$Outcome == 1
df_out <- df[mean_out_a, ]
View(df_out)
ped <- mean(df_out$DiabetesPedigreeFunction)
print(ped)
ped <- df_out$DiabetesPedigreeFunction
print(ped)
ped <- mean(df_out$DiabetesPedigreeFunction)
print(ped)
value<- paste("the mean of outcome ", out_val, "pedigree function", ped, sep = " ")
unique_age_val <- unique(df$Age)
print(unique_age_val)
unique_age_val <- unique(df$Age)
for (i in unique_age_val){
print(i)
}
unique_age_val <- unique(df$Age)
for (i in unique_age_val){
bp <- df$Age == i
df_age <- df[bp, ]
mean_bp <- mean(df_age$BloodPressure)
print(mean_bp)
}
unique_age_val <- unique(df$Age)
bp_mean <- c()
for (i in unique_age_val){
bp <- df$Age == i
df_age <- df[bp, ]
mean_bp <- mean(df_age$BloodPressure)
bp_mean <- c(bp_mean, mean_bp)
}
print(bp_mean)
new_bp_mean <- data.frame(
age_val = unique_age_val,
mean_BP = bp_mean
)
print(new_bp_mean)
max_bp <- max(new_bp_mean$mean_BP)
a <- new_bp_mean$mean_BP == max_bp
new_bp_mean[a, ]
max_bp <- min(new_bp_mean$mean_BP)
a <- new_bp_mean$mean_BP == max_bp
new_bp_mean[a, ]
unique_age_val <- unique(df$Age)
bp_mean <- c()
for (i in unique_age_val){
bp <- df$Age == i
df_age <- df[bp, ]
mean_bp <- mean(df_age$BloodPressure)
bp_mean <- c(bp_mean, mean_bp)
}
print(bp_mean)
df$BloodPressure
sum(df$BloodPressure)
vals <- df$BloodPressure
for (i in vals){
percent_bp <- (i/ sum(df$BloodPressure))* 100
print(percent_bp)
}
vals <- df$BloodPressure
for (i in vals){
percent_bp <- round((i/ sum(df$BloodPressure))* 100, 3)
print(percent_bp)
}
data_percent <- data.frame(
bloodpressure = vals,
perecntage = bp_percent
)
vals <- df$BloodPressure
bp_percent <- c()
for (i in vals){
percent_bp <- round((i/ sum(df$BloodPressure))* 100, 3)
bp_percent <- c(bp_percent, percent_bp)
}
data_percent <- data.frame(
bloodpressure = vals,
perecntage = bp_percent
)
print(data_percent)
View(data_percent)
library("readr")
library("readr")
path <- "C:/Users/USER/Downloads/DataDIAB/diabetes.csv"
df <- read_csv(path)
View(df)
cols <- colnames(df)
print(cols)
print(nrow(df))
print(ncol(df))
a_val <- df$Age >=50
b_val <- df[a_val,]
sum(a_val)
d_val <- which(a_val)
print(d_val)
print(df[d_val,])
age_dependency <- function(age_val){
a_val <- df$Age >=age_val
b_val <- df[a_val,]
print(b_val)
}
age_dependency(25)
age_outcome_dependency <- function(age, outcome_val){
age_outcome <- df$Age > age  & df$Outcome == outcome_val
a_out <- df[age_outcome, ]
print(a_out)
}
age_outcome_dependency(38, 1)
install.packages('dslabs')
install.packages('tidyverse')
library("readr")
library("readr")
path <- "C:/Users/USER/Desktop/Data 1/Assignment/Brewery_data.csv"
df <- read_csv(path)
View(df)
profit <- sum(df$PROFIT)
print(profit)
View(df)
territory <- c()
for (country in df$COUNTRIES){
if (country == "Nigeria" | country == "Ghana"){
territory <- c(territory, "Anglophone")
} else {
territory <- c(territory, "Francophone")
}
}
df2 <- mutate(df, TERRITORY = territory, .after = "COUNTRIES")
library(dplyr)
territory <- c()
for (country in df$COUNTRIES){
if (country == "Nigeria" | country == "Ghana"){
territory <- c(territory, "Anglophone")
} else {
territory <- c(territory, "Francophone")
}
}
df2 <- mutate(df, TERRITORY = territory, .after = "COUNTRIES")
View(df2)
#### 2 ####
anglo <- df2$TERRITORY == "Anglophone"
print(anglo)
#### 2 ####
mask <- df2$TERRITORY == "Anglophone"
which(mask)
#### 2 ####
anglo_mask <- df2$TERRITORY == "Anglophone"
anglo_pos <- which(mask)
anglo_profit <- sum(df2$PROFIT[pos])
anglo_profit <- sum(df2$PROFIT[anglo_pos])
print(anglo_profit)
#### 2 ####
terr_profit <- function(territory){
mask <- df2$TERRITORY == territory
pos <- which(mask)
profit <- sum(df2$PROFIT[pos])
return(profit)
}
terr_profit("Anglophone")
terr_profit("Francophone")
detach("package:dplyr", unload = TRUE)
library("readr")
library("dplyr")
path <- "C:/Users/USER/Desktop/Data 1/Assignment/Brewery_data.csv"
df <- read_csv(path)
View(df)
territory <- c()
for (country in df$COUNTRIES){
if (country == "Nigeria" | country == "Ghana"){
territory <- c(territory, "Anglophone")
} else {
territory <- c(territory, "Francophone")
}
}
df2 <- mutate(df, TERRITORY = territory, .after = "COUNTRIES")
View(df2)
#### 1 ####
profit <- sum(df$PROFIT)
print(profit)
#### 2 ####
terr_profit <- function(territory){
mask <- df2$TERRITORY == territory
pos <- which(mask)
profit <- sum(df2$PROFIT[pos])
return(profit)
}
terr_profit("Anglophone")
terr_profit("Francophone")
#### 3 ####
df$YEARS == 2019
aa <- df[a,]
View(aa)
aa <- df[a,]
#### 3 ####
a <- df$YEARS == 2019
aa <- df[a,]
View(aa)
#### 3 ####
a <- df$YEARS == 2019
which.max(df[a])
which.max(aa)
#### 3 ####
a <- df$YEARS == 2019
aa <- df[a,]
View(aa)
which.max(aa)
which.max(aa$PROFIT)
View(aa)
aa$COUNTRIES[inx]
inx <- which.max(aa$PROFIT)
aa$COUNTRIES[inx]
aa[inx]
inx <- which.max(aa$PROFIT)
#### 3 ####
prof <- function(year){
a <- df$YEARS == year
aa <- df[a,]
View(aa)
inx <- which.max(aa$PROFIT)
return(aa$COUNTRIES[inx])
}
prof(2018)
#### 3 ####
prof <- function(year){
a <- df$YEARS == year
aa <- df[a,]
inx <- which.max(aa$PROFIT)
return(aa$COUNTRIES[inx])
}
prof(2018)
prof(2019)
prof(2017)
profit(2019)
#### 4 ####
df$YEARS[which.max(df$PROFIT)]
#### 4 ####
df$YEARS[which.max(df$PROFIT)]
#### 4 ####
highest <- which.max(df$PROFIT)
df$YEARS[highest]
c <- df$YEARS[highest]
df$COUNTRIES[c]
df$COUNTRIES[higest]
df$COUNTRIES[highest]
#### 5 ####
lowest <- which.min(df$PROFIT)
df$MONTHS[lowest]
df$PROFIT[df$YEARS == 2019]
#### 5 ####
lowest <- which.min(df$PROFIT[df$YEARS == 2018])
df$MONTHS[lowest]
#### 5 ####
lowest <- which.min(df$PROFIT[df$YEARS == 2018 & df$MONTHS == "December"])
df[lowest]
#### 5 ####
lowest <- which.min(df$PROFIT[df$YEARS == 2018 & df$MONTHS == "December"])
df[lowest,]
View(df[lowest,])
#### 5 ####
lowest <- which.min(df[df$YEARS == 2018 & df$MONTHS == "December"])
#### 5 ####
lowest <- which.min(df[df$YEARS == 2018 & df$MONTHS == "December",])
View(lowest)
